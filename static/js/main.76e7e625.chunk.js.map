{"version":3,"sources":["components/Progress.js","context/QuizContext.js","components/Question.js","reducers/types.js","components/Answer.js","components/Answers.js","reducers/QuizReducer.js","App.js","serviceWorker.js","index.js"],"names":["Progress","current","total","QuizContext","createContext","Question","state","useContext","currentQuestion","question","questions","SET_CURRENT_ANSWER","SET_CURRENT_QUESTION","SET_ERROR","SET_SHOW_RESULTS","SET_ANSWERS","RESET_QUIZ","Answer","props","classes","selected","push","value","letter","className","join","onClick","e","dispatch","type","currentAnswer","target","error","answer","Answers","answer_a","answer_b","answer_c","answer_d","quizReducer","action","showResults","answers","App","id","correct_answer","initialState","useReducer","map","find","questionId","key","renderResultMark","Provider","length","renderError","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.76e7e625.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Progress({ current, total }) {\r\n    return (\r\n        <div>\r\n            <h3>Question { current } of { total }</h3>\r\n        </div>\r\n    )\r\n}\r\n","import {createContext} from 'react';\r\n\r\nconst QuizContext = createContext();\r\n\r\nexport default QuizContext;","import React, {useContext} from 'react';\r\nimport QuizContext from '../context/QuizContext';\r\n\r\nfunction Question() {\r\n    const {state} = useContext(QuizContext);\r\n    const {currentQuestion, questions} = state;\r\n    const question = questions[currentQuestion];\r\n    return <h1>{question.question}</h1>;\r\n}\r\n\r\nexport default Question;","export const SET_CURRENT_ANSWER = 'SET_CURRENT_ANSWER';\r\nexport const SET_CURRENT_QUESTION = 'SET_CURRENT_QUESTION';\r\nexport const SET_ERROR = 'SET_ERROR';\r\nexport const SET_SHOW_RESULTS = 'SET_SHOW_RESULTS';\r\nexport const SET_ANSWERS = 'SET_ANSWERS';\r\nexport const RESET_QUIZ = 'RESET_QUIZ';","import React from 'react';\r\nimport {SET_CURRENT_ANSWER, SET_ERROR} from '../reducers/types.js';\r\n\r\nfunction Answer(props) {\r\n    let classes = ['answer'];\r\n\r\n    const handleClick = e => {\r\n        props.dispatch({\r\n            type: SET_CURRENT_ANSWER,\r\n            currentAnswer: e.target.value,\r\n        });\r\n        props.dispatch({type: SET_ERROR, error: ''});\r\n    };\r\n\r\n    if (props.selected) {\r\n        classes.push('selected');\r\n    }\r\n    return (\r\n        <button\r\n            value={props.letter}\r\n            className={classes.join(' ')}\r\n            onClick={handleClick}>\r\n            <span className=\"letter\">{props.letter}.</span> {props.answer}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Answer;","import React, {useContext} from 'react';\r\nimport Answer from './Answer';\r\nimport QuizContext from '../context/QuizContext';\r\n\r\nfunction Answers() {\r\n    const {state, dispatch} = useContext(QuizContext);\r\n    const {currentAnswer, currentQuestion, questions} = state;\r\n    const question = questions[currentQuestion];\r\n\r\n    return (\r\n        <>\r\n            <Answer\r\n                letter=\"a\"\r\n                answer={question.answer_a}\r\n                dispatch={dispatch}\r\n                selected={currentAnswer === 'a'}\r\n            />\r\n            <Answer\r\n                letter=\"b\"\r\n                answer={question.answer_b}\r\n                dispatch={dispatch}\r\n                selected={currentAnswer === 'b'}\r\n            />\r\n            <Answer\r\n                letter=\"c\"\r\n                answer={question.answer_c}\r\n                dispatch={dispatch}\r\n                selected={currentAnswer === 'c'}\r\n            />\r\n            <Answer\r\n                letter=\"d\"\r\n                answer={question.answer_d}\r\n                dispatch={dispatch}\r\n                selected={currentAnswer === 'd'}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Answers;","import {\r\n    SET_ANSWERS,\r\n    SET_CURRENT_QUESTION,\r\n    SET_CURRENT_ANSWER,\r\n    SET_ERROR,\r\n    SET_SHOW_RESULTS,\r\n    RESET_QUIZ,\r\n} from './types.js';\r\n\r\nfunction quizReducer(state, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ANSWER:\r\n            return {\r\n                ...state,\r\n                currentAnswer: action.currentAnswer,\r\n            };\r\n        case SET_CURRENT_QUESTION:\r\n            return {\r\n                ...state,\r\n                currentQuestion: action.currentQuestion,\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n            };\r\n        case SET_SHOW_RESULTS:\r\n            return {\r\n                ...state,\r\n                showResults: action.showResults,\r\n            };\r\n        case SET_ANSWERS:\r\n            return {\r\n                ...state,\r\n                answers: action.answers,\r\n            };\r\n        case RESET_QUIZ:\r\n            return {\r\n                ...state,\r\n                answers: [],\r\n                currentQuestion: 0,\r\n                currentAnswer: '',\r\n                showResults: false,\r\n                error: '',\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default quizReducer;","import React, {useReducer} from 'react';\nimport Progress from './components/Progress';\nimport Question from './components/Question';\nimport Answers from './components/Answers';\nimport QuizContext from './context/QuizContext';\n\nimport {\n    SET_ANSWERS,\n    SET_CURRENT_QUESTION,\n    SET_CURRENT_ANSWER,\n    SET_ERROR,\n    SET_SHOW_RESULTS,\n    RESET_QUIZ,\n} from './reducers/types.js';\nimport quizReducer from './reducers/QuizReducer';\n\nimport './App.css';\n\nfunction App() {\n    const questions = [\n        {\n            id: 1,\n            question: 'Which statement about Hooks is not true?',\n            answer_a:\n                'Hooks are 100% backwards-compatible and can be used side by side with classes',\n            answer_b: 'Hooks are still in beta and not available yet',\n            answer_c:\n                \"Hooks are completely opt-in, there's no need to rewrite existing code\",\n            answer_d: 'All of the above',\n            correct_answer: 'b',\n        },\n        {\n            id: 2,\n            question: 'Which one is not a Hook?',\n            answer_a: 'useState()',\n            answer_b: 'useConst()',\n            answer_c: 'useReducer()',\n            answer_d: 'All of the above',\n            correct_answer: 'b',\n        },\n        {\n            id: 3,\n            question: 'What Hook should be used for data fetching?',\n            answer_a: 'useDataFetching()',\n            answer_b: 'useApi()',\n            answer_c: 'useEffect()',\n            answer_d: 'useRequest()',\n            correct_answer: 'c',\n        },\n    ];\n\n    const initialState = {\n        questions,\n        currentQuestion: 0,\n        currentAnswer: '',\n        answers: [],\n        showResults: false,\n        error: '',\n    };\n\n    const [state, dispatch] = useReducer(quizReducer, initialState);\n    const {currentQuestion, currentAnswer, answers, showResults, error} = state;\n\n    const question = questions[currentQuestion];\n\n    const renderError = () => {\n        if (!error) {\n            return;\n        }\n\n        return <div className=\"error\">{error}</div>;\n    };\n\n    const renderResultMark = (question, answer) => {\n        if (question.correct_answer === answer.answer) {\n            return <span className=\"correct\">Correct</span>;\n        }\n\n        return <span className=\"failed\">Failed</span>;\n    };\n\n    const renderResultsData = () => {\n        return answers.map(answer => {\n            const question = questions.find(\n                question => question.id === answer.questionId\n            );\n\n            return (\n                <div key={question.id}>\n                    {question.question} - {renderResultMark(question, answer)}\n                </div>\n            );\n        });\n    };\n\n    const restart = () => {\n        dispatch({type: RESET_QUIZ});\n    };\n\n    const next = () => {\n        const answer = {questionId: question.id, answer: currentAnswer};\n\n        if (!currentAnswer) {\n            dispatch({type: SET_ERROR, error: 'Please select an option'});\n            return;\n        }\n\n        answers.push(answer);\n        dispatch({type: SET_ANSWERS, answers});\n        dispatch({type: SET_CURRENT_ANSWER, currentAnswer: ''});\n\n        if (currentQuestion + 1 < questions.length) {\n            dispatch({\n                type: SET_CURRENT_QUESTION,\n                currentQuestion: currentQuestion + 1,\n            });\n            return;\n        }\n\n        dispatch({type: SET_SHOW_RESULTS, showResults: true});\n    };\n\n    if (showResults) {\n        return (\n            <div className=\"container results\">\n                <h2>Results</h2>\n                <ul>{renderResultsData()}</ul>\n                <button className=\"btn btn-primary\" onClick={restart}>\n                    Restart\n                </button>\n            </div>\n        );\n    } else {\n        return (\n            <QuizContext.Provider value={{state, dispatch}}>\n                <div className=\"container\">\n                    <Progress\n                        total={questions.length}\n                        current={currentQuestion + 1}\n                    />\n                    <Question />\n                    {renderError()}\n                    <Answers />\n                    <button className=\"btn btn-primary\" onClick={next}>\n                        Confirm and Continue\n                    </button>\n                </div>\n            </QuizContext.Provider>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}